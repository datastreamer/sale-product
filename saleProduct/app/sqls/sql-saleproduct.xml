<?xml version="1.0" encoding="UTF-8"?>
<properties>
    <entry key="sql_list_supplierInquiryHistory">
    	select s.* ,
    	ss.NAME,
    	ss.EVALUATE,
    	( TO_DAYS( NOW() ) - TO_DAYS(s.CREATE_TIME) ) as DAY_NUM,
    	(select name from sc_user where login_id = s.creator) as USERNAME
    	from sc_purchase_supplier_inquiry s ,
    	sc_supplier ss
    	where
    	( 
    		1=1
    		{@ and ( 
    				s.sku = '#realSku#'
		    	 	or 
		    	 	s.asin in (
		    	 		select spd.asin 
		    	 		from sc_real_product srp,
		    	 		sc_product_dev spd
		    	 		 where 
		    	 		 srp.id = spd.real_product_id
		    	 		 and srp.real_sku = '#realSku#'
		    	 	)
		    	)
    	 	}
    	 	{@ and s.asin = '#asin#'}
    	)
    	and s.supplier_id = ss.id
    	order by s.create_time desc
    </entry>
    
    <entry key="sql_getSupplierInquiryByInquiryId">
    	select s.* ,
    	(select name from sc_user where login_id = s.creator) as USERNAME,
    	(select name from sc_supplier where id = s.supplier_id) as SUPPLIER_NAME
    	from sc_purchase_supplier_inquiry s
    	where s.id = '{@#id#}'
    </entry>
    
    <entry key="sql_list_supplierInquiryByAsin">
    	select s.* ,
    	(select name from sc_user where login_id = s.creator) as USERNAME,
    	(select name from sc_supplier where id = s.supplier_id) as SUPPLIER_NAME
    	from sc_purchase_supplier_inquiry s
    	where s.asin = '{@#asin#}'
    	order by s.create_time desc
    </entry>
    
    <entry key="sql_saleproduct_getGoodsIdByPurchasePlanProductId">
 			select srp.* from
 			  sc_real_product srp,sc_purchase_plan_details sppd
 			  where srp.real_sku = sppd.sku
 			  and sppd.id = '{@#id#}'
   </entry>
    
	<!--入库sql-->
	<entry key="sql_saleproduct_quantity_in">
 			update sc_real_product set quantity = {@#genQuantity#} 
 			,LAST_IN_TIME = now()
 			 where id='{@#realProductId#}'
   </entry>
   
   <entry key="sql_saleproduct_quantity_out">
 			update sc_real_product set quantity =  quantity - {@#quantity#}
 			 where id='{@#realProductId#}'
   </entry>
   
   <entry key="sql_saleproduct_getById">
 			select sc_real_product.*,
			(select s.name from sc_product_category s where s.id = sc_real_product.category_id ) as CATEGORY_NAME,
			(SELECT NAME FROM sc_postage_services sps WHERE sps.id = sc_real_product.postage_service_id) AS POSTAGE_SERVICE_NAME,
  			(SELECT NAME FROM sc_package_group spg WHERE spg.id = sc_real_product.package_group_id) AS PACKAGE_GROUP_NAME	
			from sc_real_product   where id='{@#realProductId#}'
   </entry>
   
   <entry key="sql_saleproduct_getByIdForStorage">
 			 SELECT sc_real_product.*,
		        (SELECT SUM(QUANTITY) FROM sc_warehouse_order s1 WHERE s1.real_id =sc_real_product.id
		        and s1.status = 1
		         ) AS LOCK_QUANTITY,
			(SELECT s.name FROM sc_product_category s WHERE s.id = sc_real_product.category_id ) AS CATEGORY_NAME
			FROM sc_real_product
			  where id='{@#realProductId#}'
   </entry>
   
    <entry key="sql_saleproduct_list">
 			SELECT sc_real_product.*,
		        (SELECT SUM(QUANTITY) FROM sc_warehouse_order s1 WHERE s1.real_id =sc_real_product.id
		        	and status = 1 ) AS LOCK_QUANTITY ,
		        ( select sum(quantity) from sc_goods_inventory sgi where sgi.goods_id = sc_real_product.id  and type = '1'
		           {@ and warehouse_id = '#warehouseId#' }
		         )  as COMMON_QUANTITY,
		         ( select sum(quantity) from sc_goods_inventory sgi where sgi.goods_id = sc_real_product.id  and type = '2'
		            {@ and warehouse_id = '#warehouseId#' }
		          )  as FBA_QUANTITY,
		          ( CASE WHEN ( sc_real_product.IMAGE_URL  IS NULL or sc_real_product.IMAGE_URL  = '' ) THEN (
		               ( select image_url from sc_utils_image where entity_type='realProduct' and entity_id =sc_real_product.id limit 0,1 ) 
		          ) ELSE  sc_real_product.IMAGE_URL END ) as IMG_URL
		         from sc_real_product where 1=1
		     {@ and is_onsale='#isOnsale#'}
 			{@ and type='#type#'}
 			{@ and status='#status#'}
 			{@ and name like '%#name#%'}
 			{@ and ( name like '%#searchKey#%' or real_sku like '%#searchKey#%'  or memo like '%#searchKey#%' 
 			  or real_sku in (
 			    select sr.real_sku from sc_real_product_rel sr ,sc_amazon_account_product sp where sr.sku = sp.sku
 			    and sp.asin like '%#searchKey#%'
 			)
 			)}
 			{@ and real_sku='#sku#'}
 			{@ and name like '%#NAME#%'}
 			{@ and real_sku in (
 			    select sr.real_sku from sc_real_product_rel sr ,sc_amazon_account_product sp where sr.sku = sp.sku
 			    and sp.asin = '#asin#'
 			)}
 			{@ and real_sku='#REAL_SKU#'}
 			{@ and category_id='#categoryId#'}
   </entry>
   
   <entry key="sql_saleproduct_insert">
 		INSERT INTO sc_real_product 
		(REAL_SKU, 
		IMAGE_URL,
		CREATOR, 
		CREATE_TIME, 
		NAME, 
		MEMO, 
		URL,
		GUID,
		PACKAGE_TYPE,
		WARNING_QUANTITY,
		SECURITY_QUANTITY,
		WEIGHT,
		WEIGHT_UNIT,
		LENGTH,
		WIDTH,
		HEIGHT,
		TYPE,
		STATUS,
		CATEGORY_ID,
		PACKAGE_GROUP_ID,
		POSTAGE_SERVICE_ID,
		S_KEYS,
		DECLARATION_NAME,
		DECLARATION_PRICE,
		PROPERTIES
		)
		VALUES
		('{@#sku#}', 
		'{@#imageUrl#}', 
		'{@#loginId#}', 
		NOW(), 
		'{@#name#}', 
		'{@#memo#}', 
		'{@#url#}',
		'{@#guid#}',
		'{@#packageType#}',
		'{@#warningQuantity#}',
		'{@#securityQuantity#}',
		'{@#weight#}',
		'{@#weightUnit#}',
		'{@length#}',
		'{@#width#}',
		'{@#height#}',
		'{@#type#}',
		1,
		'{@#categoryId#}',
		'{@#packageGroupId#}',
		'{@#postageServiceId#}',
		'{@#keys#}',
		'{@#declarationName#}',
		'{@#declarationPrice#}',
		'{@#properties#}'
		)
   </entry>
   
    <entry key="sql_saleproduct_getMaxSKU">
    	SELECT ( CASE WHEN MAX(real_sku) IS NULL THEN 10000000 ELSE ( MAX(real_sku)+1) END ) AS C 
		FROM sc_real_product
    </entry>
   
   <entry key="sql_saleproduct_update">
 		
	UPDATE sc_real_product 
	SET 
		{@ IMAGE_URL = '#imageUrl#',}
		NAME = '{@#name#}' , 
		PROPERTIES = '{@#properties#}',
		MEMO = '{@#memo#}' , 
		URL = '{@#url#}',
		PACKAGE_TYPE = '{@#packageType#}',
		WARNING_QUANTITY = '{@#warningQuantity#}',
		SECURITY_QUANTITY = '{@#securityQuantity#}',
		WEIGHT = '{@#weight#}',
		WEIGHT_UNIT = '{@#weightUnit#}',
		LENGTH = '{@#length#}',
		WIDTH = '{@#width#}',
		HEIGHT = '{@#height#}',
		REAL_SKU = '{@#sku#}',
		CATEGORY_ID = '{@#categoryId#}',
		PACKAGE_GROUP_ID = '{@#packageGroupId#}',
		POSTAGE_SERVICE_ID = '{@#postageServiceId#}',
		DECLARATION_NAME = '{@#declarationName#}',
		DECLARATION_PRICE = '{@#declarationPrice#}',
		S_KEYS = '{@#keys#}'
	WHERE
	 	ID = '{@#id#}'
   </entry>
   
   <entry key="sql_saleproduct_selelctsku_list">
   	 SELECT * FROM (	
		SELECT  sc_amazon_account_product.*,
		sc_real_product_rel.sku AS REL_SKU,
		sc_real_product_rel.real_sku AS REL_REAL_SKU,
		sc_real_product_rel.account_id as REL_ACCOUNT_ID
		 FROM sc_real_product_rel
		 LEFT JOIN sc_amazon_account_product 
		 ON sc_real_product_rel.sku = sc_amazon_account_product.sku
					WHERE  sc_real_product_rel.real_id = '{@#id#}'
					{@ AND sc_real_product_rel.account_id = '#accountId#' }
					and sc_real_product_rel.sku is not null
					and sc_real_product_rel.sku != ''
					
		) t  order by t.ASIN
   </entry>
   
    <entry key="sql_saleproduct_selelctproduct_list">
    <![CDATA[
    select * from (	
		SELECT  sc_amazon_account_product.*,
		 (select count(1) from sc_real_product_rel where real_id = '{@#id#}' and
		 	sc_real_product_rel.sku = sc_amazon_account_product.sku
		 	and sc_real_product_rel.account_id = sc_amazon_account_product.account_id
		 ) as checked
		 FROM sc_amazon_account_product 
					where status = 'Y'
					{@ and title like '%#title#%' }
					{@ and asin = '#asin#' }
					{@ and sku = '#sku#' }
					{@ and account_id = '#accountId#' }
					
					{@ and sku not in (
								select sku from sc_amazon_product_category_rel where sku is not null and account_id = '#accountId#')
						and 1= #uncategory#
					}
					{@ and sku in (
								select sku from sc_amazon_product_category_rel where category_id = '#categoryId#'
								and sku is not null and account_id = '#accountId#'
					)}
					and sku not in (
						select sku from sc_real_product_rel where real_id != '{@#id#}'
					)
		) t order by t.checked desc
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_channel_list">
    <![CDATA[
    SELECT * FROM (	
		SELECT  sc_amazon_account_product.*,
		sc_real_product_rel.sku AS REL_SKU,
		sc_real_product_rel.QUANTITY as ASSIGN_QUANTITY,
		(case when ( sc_amazon_account_product.title is  null  or sc_amazon_account_product.title = '') then sp.title else sc_amazon_account_product.title end ) as P_TITLE,
		(CASE WHEN ( sc_amazon_account_product.title IS  NULL  OR sc_amazon_account_product.title = '') 
			THEN (
			(SELECT spi.local_url FROM sc_product_imgs spi WHERE spi.asin = sp.ASIN LIMIT 0,1)
			) ELSE sc_amazon_account_product.LOCAL_URL END ) AS P_LOCAL_URL,
		(SELECT NAME FROM sc_amazon_account WHERE id = sc_real_product_rel.account_id ) AS CHANNEL_NAME,
		( select sum(sc.Quantity_Ordered)   from sc_order_item sc where sc.seller_sku = sc_amazon_account_product.sku ) as ORDER_NUM,
		( select sum(sc.Quantity_Ordered - sc.Quantity_Shipped )   from sc_order_item sc,sc_order so
			 where sc.seller_sku = sc_amazon_account_product.sku
			and    sc.order_id = so.order_id and so.order_status in ('Unshipped','PartiallyShipped') and so.FULFILLMENT_CHANNEL = 'MFN' ) as UNSHIPPED_NUM
		 FROM sc_real_product_rel
		 LEFT JOIN sc_amazon_account_product 
		 ON sc_real_product_rel.sku = sc_amazon_account_product.sku
		 LEFT JOIN sc_product sp
		ON sp.ASIN = sc_amazon_account_product.ASIN
					WHERE  sc_real_product_rel.real_id = '{@#id#}'
					{@ AND sc_amazon_account_product.title LIKE '%#title#%' }
					{@ AND sc_amazon_account_product.asin = '#asin#' }
					{@ AND sc_amazon_account_product.sku = '#sku#' }
					{@ AND sc_real_product_rel.account_id = '#accountId#' }
					
					{@ AND sc_amazon_account_product.sku NOT IN (
								SELECT sku FROM sc_amazon_product_category_rel WHERE sku IS NOT NULL AND account_id = '#accountId#')
						AND 1= #uncategory#
					}
					{@ AND sc_amazon_account_product.sku IN (
								SELECT sku FROM sc_amazon_product_category_rel WHERE category_id = '#categoryId#'
								AND sku IS NOT NULL AND account_id = '#accountId#'
					)}
					and sc_real_product_rel.sku is not null
					and sc_real_product_rel.sku != ''
					
		) t  order by t.CHANNEL_NAME , t.ASIN
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_select_list">
    <![CDATA[
    	SELECT * from sc_real_product 
    	where not exists (
    		select * from sc_real_product_composition s1 where s1.composition_sku = sc_real_product.real_sku
    	)
    	and type = 'base' and status = '1' 
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_saveLimitPrice">
    <![CDATA[
	    UPDATE sc_real_product 
			SET
			SALE_LOWEST_PRICE_FBA = '{@#SALE_LOWEST_PRICE_FBA#}' , 
			SALE_SUGGEST_PRICE_FBA = '{@#SALE_SUGGEST_PRICE_FBA#}' , 
			SALE_LOWEST_PRICE_FBM = '{@#SALE_LOWEST_PRICE_FBM#}' , 
			SALE_SUGGEST_PRICE_FBM = '{@#SALE_SUGGEST_PRICE_FBM#}'
			WHERE
			ID = '{@#ID#}'
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_composition_list">
    <![CDATA[
    SELECT s2.*,
    	s1.quantity as COM_QUANTITY,
    	COMPOSITION_ID, 
		COMPOSITION_SKU, 
		REF_ID, 
		REF_SKU
     FROM 
		sc_real_product_composition s1,sc_real_product s2
		WHERE s1.ref_sku = s2.real_sku
		and s1.composition_id = '{@#id#}'
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_composition_save">
    <![CDATA[
    INSERT INTO sc_real_product_composition 
		(
		COMPOSITION_ID,
		COMPOSITION_SKU, 
		REF_ID,
		REF_SKU, 
		QUANTITY, 
		MEMO, 
		CREATE_TIME, 
		CREATOR
		)
		VALUES
		(
			{@'#comId#'},
			{@'#comSku#'}, 
			{@'#refId#'}, 
			{@'#refSku#'}, 
			'{@#quantity#}', 
			'{@#memo#}', 
			NOW(), 
			'{@#loginId#}'
		)
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_supplier_save">
    <![CDATA[
   insert into sc_real_product_supplier 
		(REAL_SKU, 
		SUPPLIER_ID, 
		CREATE_TIME, 
		CREATOR
		)
		values
		('{@#realSku#}', 
		'{@#supplierId#}', 
		NOW(), 
		'{@#loginId#}'
		)
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_supplier_list">
    <![CDATA[
   SELECT * FROM sc_supplier WHERE id IN (
	SELECT supplier_id FROM sc_real_product_supplier s1 WHERE s1.REAL_SKU = '{@#realSku#}'
)
	]]>	      
    </entry>

    
    
    
    <!--查询货品分类树-->
    <entry key="sql_saleproduct_categorytree">
    <![CDATA[
        select sc_product_category.*,
        		sc_product_category.name as TEXT,
              (select count(*) from sc_real_product where sc_real_product.category_id = sc_product_category.id ) as TOTAL
              from sc_product_category
   
	]]>	      
    </entry>
    
     
  <!--查询货品分类树-->
    <entry key="sql_saleproduct_categorytreeBySupplier">
    <![CDATA[
        select sc_product_category.*,
              (select count(*) from sc_real_product where 
	              	sc_real_product.category_id = sc_product_category.id
	              	and sc_real_product.real_sku in (
	              		select real_sku from sc_real_product_supplier srps where srps.supplier_id = '{@#supplierId#}'
	              	)
              	 ) as TOTAL
              from sc_product_category
              
   
	]]>	      
    </entry>
    
    <entry key="sql_saleproduct_listBySupllierId">
 			SELECT sc_real_product.*,
		        (SELECT SUM(QUANTITY) FROM sc_warehouse_order s1 WHERE s1.real_id =sc_real_product.id
		        	and status = 1 ) AS LOCK_QUANTITY ,
		        ( select sum(quantity) from sc_goods_inventory sgi where sgi.goods_id = sc_real_product.id  and type = '1'
		           {@ and warehouse_id = '#warehouseId#' }
		         )  as COMMON_QUANTITY,
		         ( select sum(quantity) from sc_goods_inventory sgi where sgi.goods_id = sc_real_product.id  and type = '2'
		            {@ and warehouse_id = '#warehouseId#' }
		          )  as FBA_QUANTITY
		         from sc_real_product where 1=1
		     {@ and is_onsale='#isOnsale#'}
 			{@ and type='#type#'}
 			{@ and status='#status#'}
 			{@ and name like '%#name#%'}
 			{@ and ( name like '%#searchKey#%' or real_sku like '%#searchKey#%'  or memo like '%#searchKey#%' 
 			  or real_sku in (
 			    select sr.real_sku from sc_real_product_rel sr ,sc_amazon_account_product sp where sr.sku = sp.sku
 			    and sp.asin like '%#searchKey#%'
 			)
 			)}
 			{@ and real_sku='#sku#'}
 			{@ and name like '%#NAME#%'}
 			{@ and real_sku in (
 			    select sr.real_sku from sc_real_product_rel sr ,sc_amazon_account_product sp where sr.sku = sp.sku
 			    and sp.asin = '#asin#'
 			)}
 			{@ and real_sku='#REAL_SKU#'}
 			{@ and category_id='#categoryId#'}
 			and sc_real_product.real_sku in (
	              		select real_sku from sc_real_product_supplier srps where srps.supplier_id is not null 
	              		AND srps.supplier_id !=''
	              		and srps.supplier_id = '{@#supplierId#}'
	       )
	       and sc_real_product.status = 1
   </entry>
    
</properties>
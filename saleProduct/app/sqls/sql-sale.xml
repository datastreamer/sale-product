<?xml version="1.0" encoding="UTF-8"?>
<properties>
    <entry key="sql_delete_sc_pp">
    	UPDATE SC_PURCHASE_PLAN SET status = '2' where id = '{@#planId#}'
    </entry>
    
    <entry key="sql_purchase_plan_insert"> 
			insert into sc_purchase_plan 
				(
				NAME, 
				PLAN_TIME, 
				PLAN_END_TIME, 
				CREATE_TIME, 
				CREATOR, 
				STATUS, 
				MEMO, 
				TYPE, 
				EXECUTOR
				)
				values
				(
				'{@#name#}', 
				'{@#planTime#}', 
				'{@#planEndTime#}', 
				NOW(), 
				'{@#loginId#}', 
				1, 
				'{@#memo#}', 
				'{@#type#}', 
				'{@#executorId#}'
				)
    </entry>
    
    <entry key="sql_purchase_plan_update"> 
			update  sc_purchase_plan 
				set
				NAME = '{@#name#}' , 
				PLAN_TIME = '{@#planTime#}' , 
				PLAN_END_TIME = '{@#planEndTime#}' , 
				MEMO = '{@#memo#}' , 
				TYPE = '{@#type#}' , 
				EXECUTOR = '{@#executorId#}'
				where
				ID = '{@#id#}' 
    </entry>
    
    <entry key="sql_purchase_plan_product_updateStatus">
    	UPDATE sc_purchase_plan_details SET status = '{@#status#}' where id = '{@#id#}'
    </entry>
    
    <entry key="sql_purchase_plan_product_listTracks">
    	select s.*,
    	 (select name from sc_user where login_id = s.creator) as CREATOR_NAME
    	 from sc_purchase_plan_details_track s
    	where s.pd_id = '{@#pdId#}'
    </entry>
    
    
    
    <entry key="sql_purchase_plan_product_insertTrack">
    	INSERT INTO  sc_purchase_plan_details_track 
			(
			PD_ID, 
			STATUS, 
			MESSAGE, 
			CREATOR, 
			CREATE_TIME
			)
			VALUES
			('{@#id#}', 
			'{@#status#}', 
			'{@#memo#}', 
			'{@#loginId#}', 
			NOW()
			)
    </entry>
    
    <entry key="sql_purchase_plan_getAsinFromSku">
    		select distinct sp.* ,
    			s1.QUOTE_PRICE,
    			s3.SKU,
    			s3.QUANTITY,
				(SELECT spi.local_url FROM sc_product_imgs spi WHERE spi.asin = sp.asin LIMIT 0,1 ) AS LOCAL_URL,
				( SELECT TOTAL_COST - PURCHASE_COST
				FROM sc_product_cost 
				WHERE sc_product_cost.asin = sp.asin AND
					( sc_product_cost.type='FBM' OR sc_product_cost.type IS NULL )  ) AS FBM_COST,
					
				( SELECT MIN(sc_sale_competition_details.seller_price+sc_sale_competition_details.seller_ship_price) FROM sc_sale_competition_details
						WHERE sc_sale_competition_details.asin = sp.asin
						and ( type like 'F%' or type like 'N%' )
						 ) AS FBM_PRICE,
						
				( SELECT MIN(sc_sale_fba_details.seller_price) FROM sc_sale_fba_details
						WHERE sc_sale_fba_details.asin = sp.asin ) AS FBA_PRICE,
				( SELECT TOTAL_COST - PURCHASE_COST
				FROM sc_product_cost WHERE sc_product_cost.asin = sp.asin AND
					( sc_product_cost.type='FBA' OR sc_product_cost.type IS NULL )  ) AS FBA_COST,
				(SELECT COUNT(*) FROM sc_product_supplier WHERE sc_product_supplier.asin = sp.asin
							AND sc_product_supplier.num1 IS NOT NULL AND  sc_product_supplier.offer1 IS NOT NULL  ) AS XJ
    		from 
    		   sc_purchase_plan_details s1,
    		   sc_real_product_rel s2,
    		   sc_amazon_account_product s3,
    		   sc_product sp
    		   LEFT JOIN sc_product_flow_details ON sc_product_flow_details.asin = sp.asin
				LEFT JOIN sc_sale_competition_details  ON sc_sale_competition_details.asin = sp.asin
    	 where s1.sku = s2.real_sku
    	 and s2.sku = s3.sku
    	 and s3.asin = sp.asin
    	 and s1.id = '{@#id#}'
    </entry>
    
    <entry key="sql_purchasePlanProductsIsExists">
    	select * from sc_purchase_plan_details
    	where plan_id = '{@#planId#}' and  sku = '{@#sku#}'
    </entry>
    
    <entry key="sql_insert_purchasePlanProducts">
    	INSERT INTO sc_purchase_plan_details 
				(
				ASIN, 
				SKU, 
				PLAN_ID, 
				CREATOR, 
				CREATE_TIME
				)
				VALUES
				(
				'{@#asin#}', 
				'{@#sku#}', 
				'{@#planId#}', 
				'{@#loginId#}', 
				NOW()
				)
    </entry>
    
    <entry key="sql_checkPurchaseProductIsValid.byAsin">
    	 select srp.* from sc_real_product srp,
    	 		sc_real_product_rel srpr ,
    	 		sc_amazon_account_product saap
    	 		where srp.id = srpr.real_id
    	 		and srpr.sku = saap.sku
    	 		and saap.asin = '{@#asin#}'
    </entry>
    
    <entry key="sql_checkPurchaseProductIsValid.bySku">
    	 select * from sc_real_product srp
    	 		where  srp.real_sku = '{@#sku#}'
    </entry>
    
    <entry key="sql_getProductDevFilter">
    <![CDATA[
    	select t1.* from (
           SELECT sc_product_filter.* ,
          (SELECT COUNT(*) FROM sc_product_filter_details scfd WHERE scfd.task_id = sc_product_filter.id  ) AS TOTAL,
          (SELECT COUNT(*) FROM sc_product_filter_details scfd WHERE scfd.task_id = sc_product_filter.id AND scfd.status in (5,7)) AS STATUS57
          FROM sc_product_filter
          where 1=1
          {@ and sc_product_filter.name like '%#filterName#%'}
          and DATE_SUB( CURDATE(), INTERVAL 2 MONTH) <= create_time
          ) t1 where t1.STATUS57 > 0  order by t1.create_time desc
      ]]>
    </entry>
    
    <entry key="sql_getProductDevFilter_Pass_Product">
    <![CDATA[
    	SELECT 
    	  distinct
    	   sp.*, 
    	    (SELECT spi.local_url FROM sc_product_imgs spi WHERE spi.asin = sp.asin LIMIT 0,1 ) AS LOCAL_URL , 
			spfd.id as FILTER_ID, 
			spfd.status as STATUS,
			srp.NAME,
			srp.IMAGE_URL,
			srp.REAL_SKU
		 FROM 
		 			sc_product_filter_details  spfd,
		 			sc_product_filter spf,
		 			sc_product sp 
		 			left join sc_amazon_account_product saap
		 			on saap.asin = sp.asin
		 			left join sc_real_product_rel srpr
		 			on srpr.sku = saap.sku
		 			left join sc_real_product srp
		 			on srp.id = srpr.real_id
			where sp.asin = spfd.asin
			   and spf.id = spfd.task_id
				and spfd.status in (5,7) 
				and DATE_SUB( CURDATE(), INTERVAL 2 MONTH) <= spf.create_time
				{@ and sp.title like '%#title#%'  }
				{@ and sp.asin = '#asin#'  }
				{@  and spfd.task_id = '#taskId#'  }
	 ]]>
    </entry>
</properties>